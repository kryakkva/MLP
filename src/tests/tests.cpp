#include <gtest/gtest.h>

#include <iostream>
#include <vector>

#include "../headers/NeuralNetwork.h"

const std::vector<double> data = {15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0156863,
                                  0.0196078,0.0313725,0.0627451,0.0117647,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                  0.00784314,0.0352941,0.180392,0.447059,0.501961,0.545098,0.615686,0.32549,
                                  0.0862745,0.027451,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.00392157,0.129412,0.301961,
                                  0.545098,0.815686,0.960784,0.980392,0.980392,0.984314,0.909804,0.623529,0.352941,
                                  0.027451,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0352941,0.352941,0.619608,0.862745,0.964706,
                                  0.996078,0.996078,0.996078,0.996078,0.984314,0.854902,0.623529,0.0862745,0,0,0,0,
                                  0,0,0,0,0,0,0,0,0,0,0.0352941,0.356863,0.858824,0.960784,0.996078,0.996078,0.964706,
                                  0.870588,0.854902,0.92549,0.996078,0.984314,0.909804,0.321569,0.00784314,0,0,0,0,0,
                                  0,0,0,0,0,0,0,0.0313725,0.356863,0.858824,0.992157,0.996078,0.968627,0.815686,
                                  0.498039,0.2,0.164706,0.521569,0.964706,0.996078,0.980392,0.545098,0.0352941,0,0,
                                  0,0,0,0,0,0,0,0,0,0.0156863,0.309804,0.854902,0.992157,0.984314,0.956863,0.639216,
                                  0.184314,0.0313725,0,0.00392157,0.2,0.870588,0.996078,0.992157,0.745098,0.105882,
                                  0,0,0,0,0,0,0,0,0,0,0.0196078,0.0862745,0.513725,0.956863,0.996078,0.917647,0.811765,
                                  0.356863,0.0392157,0,0,0,0.152941,0.85098,0.996078,0.988235,0.666667,0.0784314,0,0,
                                  0,0,0,0,0,0,0,0.00392157,0.184314,0.482353,0.909804,0.992157,0.94901,0.513725,
                                  0.231373,0.027451,0,0,0,0,0.2,0.870588,0.996078,0.976471,0.498039,0.0196078,0,0,0,
                                  0,0,0,0,0,0.00392157,0.137255,0.643137,0.866667,0.992157,0.917647,0.513725,0.125491,
                                  0.027451,0,0,0,0,0.0156863,0.447059,0.960784,0.984314,0.909804,0.321569,0.00784314,
                                  0,0,0,0,0,0,0.00392157,0.027451,0.184314,0.643137,0.960784,0.992157,0.984314,
                                  0.745098,0.164706,0.00392157,0,0,0,0,0,0.0352941,0.54902,0.980392,0.909804,0.670588,
                                  0.0862745,0,0,0,0,0,0,0,0.129412,0.352941,0.811765,0.968627,0.996078,0.972549,
                                  0.776471,0.819608,0.372549,0.0117647,0,0,0,0,0.0156863,0.133333,0.8,0.984314,
                                  0.67450,0.329412,0.0117647,0,0,0,0,0,0,0.0117647,0.309804,0.623529,0.956863,
                                  0.996078,0.992157,0.941176,0.603922,0.705882,0.290196,0.00784314,0,0,0,0,0.0352941,
                                  0.196078,0.862745,0.980392,0.545098,0.196078,0,0,0,0,0,0,0,0.0862745,0.670588,
                                  0.909804,0.996078,0.996078,0.996078,0.976471,0.768627,0.227451,0.027451,0,0,0,0,
                                  0.00392157,0.184314,0.501961,0.960784,0.909804,0.321569,0.0823529,0,0,0,0,0,0,
                                  0.027451,0.372549,0.909804,0.984314,0.996078,1,0.996078,0.968627,0.619608,0.0784314,
                                  0,0,0,0,0,0.0862745,0.623529,0.862745,0.984314,0.670588,0.0862745,0.0117647,0,0,0,
                                  0,0,0,0.125491,0.792157,0.992157,0.996078,1,1,0.980392,0.870588,0.203922,0.00392157,
                                  0,0,0,0,0.0352941,0.372549,0.909804,0.980392,0.854902,0.309804,0.0117647,0,0,0,0,0,
                                  0,0,0.125491,0.792157,0.992157,0.996078,1,0.996078,0.976471,0.858824,0.192157,0,0,0,
                                  0,0.0392157,0.356863,0.858824,0.972549,0.905882,0.372549,0.0313725,0,0,0,0,0,0,0,0,
                                  0.0784314,0.623529,0.968627,0.996078,1,0.996078,0.937255,0.843137,0.266667,
                                  0.00392157,0,0.0117647,0.0313725,0.184314,0.643137,0.960784,0.909804,0.764706,
                                  0.184314,0.00392157,0,0,0,0,0,0,0,0,0.00392157,0.203922,0.862745,0.980392,0.996078,
                                  0.992157,0.815686,0.639216,0.2,0.0235294,0.0431373,0.309804,0.494118,0.815686,
                                  0.964706,0.94901,0.513725,0.231373,0.0196078,0,0,0,0,0,0,0,0,0,0,0.0784314,0.619608,
                                  0.854902,0.984314,0.996078,0.972549,0.917647,0.678431,0.505882,0.552941,0.862745,
                                  0.956863,0.988235,0.866667,0.498039,0.125491,0.027451,0,0,0,0,0,0,0,0,0,0,0,
                                  0.00392157,0.129412,0.309804,0.670588,0.909804,0.984314,0.992157,0.988235,0.980392,
                                  0.980392,0.984314,0.960784,0.811765,0.356863,0.0392157,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                  0,0.027451,0.0862745,0.32549,0.670588,0.909804,0.960784,0.980392,0.984314,0.980392,
                                  0.909804,0.815686,0.494118,0.129412,0.00392157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                  0.0117647,0.0862745,0.321569,0.447059,0.501961,0.623529,0.537255,0.321569,0.180392,
                                  0.0313725,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.00784314,0.0156863,0.0196078,
                                  0.0627451,0.0313725,0.00784314,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                                  0,0,0,0,0};

double  first[5] = {1, 2, 3, 4, 5};
double  second[3] = {0, 0, 0};

struct MLPTest : public testing::Test {
protected:
    s21::NeuralNetwork net;
    s21::Matrix matr;
    void SetUp() {}
    void TearDown() {}
};
TEST_F(MLPTest, error_loading_data_file) {
    EXPECT_ANY_THROW(net.readData("tests/test_files/noFile.txt"));
}

TEST_F(MLPTest, error_loading_weights_no_file) {
    EXPECT_ANY_THROW(net.readWeights("tests/test_files/noFile.mlp"));
}

TEST_F(MLPTest, error_loading_weights_header) {
    EXPECT_ANY_THROW(net.readWeights("tests/test_files/2layers_header.mlp"));
}

TEST_F(MLPTest, error_loading_weights_counter) {
    EXPECT_ANY_THROW(net.readWeights("tests/test_files/2layers_counter.mlp"));
}

TEST_F(MLPTest, error_loading_weights_layer) {
    EXPECT_ANY_THROW(net.readWeights("tests/test_files/2layers_layer.mlp"));
}

TEST_F(MLPTest, error_loading_weights_col_layer) {
    EXPECT_ANY_THROW(net.readWeights("tests/test_files/2layers_colLayer.mlp"));
}

TEST_F(MLPTest, error_loading_weights_amount_more) {
    EXPECT_ANY_THROW(net.readWeights("tests/test_files/2layers_amount_more.mlp"));
}

TEST_F(MLPTest, error_loading_weights_amount_less) {
    EXPECT_ANY_THROW(net.readWeights("tests/test_files/2layers_amount_less.mlp"));
}

TEST_F(MLPTest, read_data_from_file) {
    std::vector<std::vector<double>> load = net.readData("tests/test_files/test_mnist.txt");
    for(size_t i = 0; i < load.size(); i++)
        EXPECT_EQ(static_cast<int>(load[i].size()), 785);
}

TEST_F(MLPTest, read_vect_from_file) {
    std::vector<std::vector<double>> load = net.readData("tests/test_files/test_mnist.txt");
    auto load_it = load[0].begin();
    auto data_it = data.begin();
    for (size_t i = 0; i < load[1].size(); i++) {
        EXPECT_EQ(static_cast<int>(*load_it * 100000), static_cast<int>(*data_it * 100000));
        ++load_it;
        ++data_it;
    }
}

TEST_F(MLPTest, error_matrix_multi) {
    s21::Matrix new_matr;
    new_matr.matrixInit(3, 5);
    EXPECT_ANY_THROW(matr.multi(new_matr, first, 6, second));
}

TEST_F(MLPTest, error_matrix_multi_tran) {
s21::Matrix new_matr;
new_matr.matrixInit(3, 5);
EXPECT_ANY_THROW(matr.multi_T(new_matr, second, 2, first));
}


int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
